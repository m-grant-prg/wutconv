#! /usr/bin/env bash
##########################################################################
##									##
##	wutconv is automatically generated,				##
##		please do not modify!					##
##									##
##########################################################################

##########################################################################
##									##
## Script ID: wutconv							##
## Author: Mark Grant							##
##									##
## Purpose:								##
## Converts one or more text files to windows or unix line endings, or,	##
## if no text files are specified on the command line, then stdin is 	##
## converted to stdout.							##
##                                                              	##
## Syntax:      wutconv [OPTIONS] [TextFileName] [TextFileName1] ...	##
##			[OPTIONS] are:-					##
##	-h, --help Displays usage information.				##
##	-u, --unix Convert to Unix line endings.			##
##	-V, --version Displays version information.			##
##	-w, --windows Convert to Windows line endings.			##
##									##
## Exit Codes:	0 & 64 - 113 as per C/C++ standard			##
##		0 - success						##
##		64 - Invalid arguments					##
##		66 - File access error					##
##		67 - trap received					##
##		77 - Permissions error					##
##									##
##########################################################################

##########################################################################
##									##
## Changelog								##
##									##
## Date		Author	Version	Description				##
##									##
## 04/09/2014	MG	1.0.1	First release.				##
## 29/11/2014	MG	1.0.2	Switch to use GNU getopt to enable long	##
##				options.				##
## 29/11/2014	MG	1.0.3	Add overall package version to -V.	##
## 01/1202014	MG	1.0.4	Implement conversion of stdin to stdout	##
##				if no text files are specified on the	##
##				command line.				##
##									##
##########################################################################


####################
## Init variables ##
####################
script_exit_code=0
version="1.0.3"				# set version variable
outputprefix="wutconv: "
osname=$(uname -s)			# Get system name for OS differentiation
packageversion=@pkgversion@		# Version of the complete package

unix=FALSE
windows=FALSE

# See getopt comments at the start of "Main"
case $osname in
*BSD)	binlocation=@bindir@"/"
	;;
# Linux)	Allow fall through for now as the defaults are linux.
*)	binlocation=""
	;;
esac

###############
## Functions ##
###############

# Output $1 to stdout or stderr depending on $2
output()
{
	if [ $2 = 0 ]
	then
		echo "$outputprefix$1"
	else
		echo "$outputprefix$1" 1>&2
	fi
}

# Standard function to test command error ($1 is $?) and exit if non-zero
std_cmd_err_handler()
{
	if [ $1 != 0 ]
	then
		script_exit_code=$1
		script_exit
	fi
}

# Standard function to tidy up and return exit code
script_exit()
{
	exit $script_exit_code
}

# Standard trap exit function
trap_exit()
{
script_exit_code=67
output "Script terminating due to trap received. Code: "$script_exit_code 1
script_exit
}

# Setup trap
trap trap_exit SIGHUP SIGINT SIGTERM

##########
## Main ##
##########
# Process command line arguments with GNU getopt.
# (BSD includes, out of the box, a dodgy, feature lacking getopt program
# installed in /usr/bin. A GNU compatable getopt package is available to install
# and this gets installed in the bindir, ie /usr/local/bin. This means that the
# dodgy getopt version is always found first on the PATH. In order to invoke the
# correct program, $binlocation, (from Makefile bindir), is inserted in the command
# line below to specify the full path). (Linux GNU getopt can be found on PATH so
# binlocation ="").

# Options u and w are mutually exclusive.

GETOPTTEMP=`"$binlocation"getopt -o huVw --long help,unix,version,windows -n "$0" -- "$@"`
std_cmd_err_handler $?

eval set -- "$GETOPTTEMP"
std_cmd_err_handler $?

while true
do
	case "$1" in
	-h|--help)
		echo "Usage is $0 [OPTIONS]" TextFileName TextFileName1 ...
		echo "	[OPTIONS] are:-"
		echo "	'-h or --help' Displays usage information."
		echo "	'-u or --unix' Convert to Unix line endings."
		echo "	'-V or --version' Displays version information."
		echo "	'-w or --windows' Convert to Windows line endings."
		shift
		script_exit_code=0
		script_exit
		;;
	-u|--unix)
		if [ $windows = TRUE ]
		then
			script_exit_code=64
			output "Cannot specify options u AND w." 1
			script_exit
		fi
		unix=TRUE
		shift
		;;
	-V|--version)
		echo "$0 Script version "$version
		echo "$0 Package version "$packageversion
		shift
		script_exit_code=0
		script_exit
		;;
	-w|--windows)
		if [ $unix = TRUE ]
		then
			script_exit_code=64
			output "Cannot specify options w AND u." 1
			script_exit
		fi
		windows=TRUE
		shift
		;;
	--)	shift
		break
		;;
	*)	script_exit_code=1
		output "Internal error." 1
		script_exit
		;;
	esac
done

# Either u or w flag must be set.
if [ $windows = FALSE -a $unix = FALSE ]
then
	script_exit_code=64
	output "Either -u or -w must be set." 1
	script_exit
fi


# If no cmd line filenames then use stdin and stdout.
if [ $# -lt 1 ]
then
	if [ $unix = TRUE ]
	then	# Convert to Unix line endings.
		awk '{if (substr($0,length,1)=="\r")
			sub(/\r$/, "");
			print;}'
	else	# Convert to Windows line endings.
		awk '{if (substr($0,length,1)!="\r")
			sub(/$/, "\r");
			print;}'
	fi
else	# Otherwise process cmd line filenames in sequence. The for line == for arg in $@
	for arg
	do
		if [ -f $arg ]	# Is it a regular file.
		then
			if [ -r $arg -a -w $arg ]	# Is it readable and writable.
			then
				if [ $unix = TRUE ]
				then	# Convert to Unix line endings.
					awk '{if (substr($0,length,1)=="\r")
						sub(/\r$/, "");
						print;}' $arg > $arg.tmp \
						&& mv -f $arg.tmp $arg
					status=$?
					output "Converted file "$arg" to Unix format complete with status "$status $status
					((script_exit_code=$script_exit_code + $status))
				else	# Convert to Windows line endings.
					awk '{if (substr($0,length,1)!="\r")
						sub(/$/, "\r");
						print;}' $arg > $arg.tmp \
						&& mv -f $arg.tmp $arg
					status=$?
					output "Converted file "$arg" to Windows format complete with status "$status $status
					((script_exit_code=$script_exit_code + $status))
				fi
			else
				output "File "$arg" does not have the correct permissions." 1
				((script_exit_code=$script_exit_code + 1))
			fi
		else
			output "File "$arg" does not exist or is not a regular file." 1
			((script_exit_code=$script_exit_code + 1))
		fi
	done
fi

# And exit
output "Script complete with exit code: "$script_exit_code $script_exit_code
script_exit
