#! @bashlocation@
#########################################################################
#									#
#	test-menu.sh is automatically generated,			#
#		please do not modify!					#
#									#
#########################################################################

#########################################################################
#									#
# Script ID: test-menu.sh						#
# Author: Copyright (C) 2019, 2021  Mark Grant				#
#									#
# Released under the GPLv3 only.					#
# SPDX-License-Identifier: GPL-3.0-only					#
#									#
# Purpose:								#
# To provide a menu for running tests.					#
#									#
# Syntax:	test-menu.sh [-h || -V ]				#
#									#
# Exit Codes:	0 - success						#
#		1 - failure						#
#									#
# Further Info:								#
#									#
#########################################################################

#########################################################################
#									#
# Changelog								#
#									#
# Date		Author	Version	Description				#
#									#
# 14/08/2019	MG	1.0.1	Created.				#
# 20/09/2019	MG	1.0.2	Correct help output.			#
# 29/11/2021	MG	1.0.3	Tighten SPDX tag.			#
#									#
#########################################################################


##################
# Init variables #
##################
readonly version=1.0.3				# Script version
readonly outputprefix="$(basename $0): "
readonly packageversion=@pkgversion@		# Package version
declare -i exit_code


#############
# Functions #
#############

# -h --help output.
# No parameters
# No return value
usage ()
{
cat << EOF
Usage is $0 [OPTIONS]
	[OPTIONS] are:-
	-h or --help Displays usage information
	-V or --version Displays version information
EOF
}

# Standard function to emit messages depending on various parameters.
# Parameters -	$1 What:-	The message to emit.
#		$2 Where:-	stdout == 0
#				stderr == 1
# No return value.
output()
{
	if (( !$2 )); then
		printf "%s\n" "$1"
	else
		printf "%s\n" "$1" 1>&2
	fi
}

# Standard function to test command error and exit if non-zero.
# Parameters - 	$1 is the exit code, (normally $? from the preceeding command).
# No return value.
std_cmd_err_handler()
{
	if (( $1 )); then
		script_exit $1
	fi
}

# Standard function to tidy up and return exit code.
# Parameters - 	$1 is the exit code.
# No return value.
script_exit()
{
	exit $1
}

# Standard trap exit function.
# No parameters.
# No return value.
trap_exit()
{
	local -i exit_code=$?
	local msg

	msg="Script terminating with exit code $exit_code due to trap received."
	output "$msg" 1
	script_exit $exit_code
}

# Setup trap.
trap trap_exit SIGHUP SIGINT SIGQUIT SIGTERM


########
# Main #
########
# Process command line arguments with getopts.
while getopts :hV arg; do
	case $arg in
	h)	usage
		script_exit 0
		;;
	V)	printf "Script version %s\n" $version
		printf "Package version %s\n" $packageversion
		shift
		script_exit 0
		;;
	\?)	output "Invalid argument -$OPTARG." 1
		script_exit 1
		;;
	esac
done

# Put up menu
printf "\n0) Test 01 - Convert 1 file to windows\n"
printf "1) Test 01 - Convert 1 file to windows - verbose\n"
printf "2) Test 02 - Convert 1 file to unix\n"
printf "3) Test 02 - Convert 1 file to unix - verbose\n"
printf "4) Test 03 - Convert stdin to windows on stdout\n"
printf "5) Test 03 - Convert stdin to windows on stdout - verbose\n"
printf "6) Test 04 - Convert stdin to unix on stdout\n"
printf "7) Test 04 - Convert stdin to unix on stdout - verbose\n"
printf "8) Test 05 - Convert 2 files to windows\n"
printf "9) Test 05 - Convert 2 files to windows - verbose\n"
printf "a) Test 06 - Convert 2 files to unix\n"
printf "b) Test 06 - Convert 2 files to unix - verbose\n"

printf "\ny) Run all tests\n"
printf "z) Run all tests - verbose\n"

# Get selection
printf "\n"
read -p "Enter your selection: " selection

case "$selection" in
0)	./test01.sh
	script_exit $?
	;;
1)	./test01verbose.sh
	script_exit $?
	;;
2)	./test02.sh
	script_exit $?
	;;
3)	./test02verbose.sh
	script_exit $?
	;;
4)	./test03.sh
	script_exit $?
	;;
5)	./test03verbose.sh
	script_exit $?
	;;
6)	./test04.sh
	script_exit $?
	;;
7)	./test04verbose.sh
	script_exit $?
	;;
8)	./test05.sh
	script_exit $?
	;;
9)	./test05verbose.sh
	script_exit $?
	;;
a)	./test06.sh
	script_exit $?
	;;
b)	./test06verbose.sh
	script_exit $?
	;;
y)	./test01.sh
	(( exit_code += $? ))
	./test02.sh
	(( exit_code += $? ))
	./test03.sh
	(( exit_code += $? ))
	./test04.sh
	(( exit_code += $? ))
	./test05.sh
	(( exit_code += $? ))
	./test06.sh
	(( exit_code += $? ))
	;;
z)	./test01verbose.sh
	(( exit_code += $? ))
	./test02verbose.sh
	(( exit_code += $? ))
	./test03verbose.sh
	(( exit_code += $? ))
	./test04verbose.sh
	(( exit_code += $? ))
	./test05verbose.sh
	(( exit_code += $? ))
	./test06verbose.sh
	(( exit_code += $? ))
	;;
*)	output "Invalid selection" 1
	script_exit 1
	;;
esac


printf "\n"
output "Script exited with exit code of $exit_code" $exit_code
script_exit $exit_code

