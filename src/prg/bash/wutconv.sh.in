#! /usr/bin/env bash
#########################################################################
#									#
#	wutconv is automatically generated,				#
#		please do not modify!					#
#									#
#########################################################################

#########################################################################
#									#
# Script ID: wutconv							#
# Author: Copyright (C) 2014-2017, 2019  Mark Grant			#
#									#
# Released under the GPLv3 only.					#
# SPDX-License-Identifier: GPL-3.0					#
#									#
# Purpose:								#
# Converts one or more text files to windows or unix line endings, or,	#
# if no text files are specified on the command line, then stdin is 	#
# converted to stdout.							#
#                                                              		#
# Syntax:      wutconv [OPTIONS] [TextFileName] [TextFileName1] ...	#
#			[OPTIONS] are:-					#
#	-h, --help Displays usage information.				#
#	-u, --unix Convert to Unix line endings.			#
#	-V, --version Displays version information.			#
#	-w, --windows Convert to Windows line endings.			#
#									#
# Exit Codes:	0 - success						#
#		1 - failure						#
#									#
#########################################################################

#########################################################################
#									#
# Changelog								#
#									#
# Date		Author	Version	Description				#
#									#
# 04/09/2014	MG	1.0.1	First release.				#
# 29/11/2014	MG	1.0.2	Switch to use GNU getopt to enable long	#
#				options.				#
# 29/11/2014	MG	1.0.3	Add overall package version to -V.	#
# 01/12/2014	MG	1.0.4	Implement conversion of stdin to stdout	#
#				if no text files are specified on the	#
#				command line.				#
# 01/12/2014	MG	1.0.5	Implement verbose option. Default is	#
#				now quiet - no status output.		#
# 01/12/2014	MG	1.0.6	Check that both -u and -w have not been	#
#				entered.				#
# 26/06/2015	MG	1.0.7	Remove BSD support.			#
# 23/10/2015	MG	1.0.8	Remove redundant osname look-up.	#
# 01/07/2017	MG	1.0.9	Enforce 80 column rule.			#
# 02/12/2017	MG	1.0.10	Add SPDX license tags to source files.	#
#				Adopt normal exit code policy; 0 on	#
#				success, 1 on failure.			#
# 11/08/2019	MG	1.0.11	Do not hardcode outputprefix.		#
#				Adopt C style for loops and ifs.	#
#				Use true booleans.			#
#				Refactor into functions.		#
#									#
#########################################################################


##################
# Init variables #
##################
script_exit_code=0
version=1.0.11				# set version variable
outputprefix="$(basename $0): "
packageversion=@pkgversion@		# Version of the complete package

unix=false
windows=false
verbosity=""


#############
# Functions #
#############

# -h --help output.
# No parameters
# No return value
usage ()
{
cat << EOF
Usage is $0 [OPTIONS] TextFileName TextFileName1 ...
	[OPTIONS] are:-"
	-h or --help Displays usage information
	-u or --unix Convert to Unix line endings
	-v or --verbose verbose output
	-V or --version Displays version information
	-w or --windows Convert to Windows line endings
EOF
}

# Standard function to emit messages depending on various parameters.
# Parameters -	$1 What:-	The message to emit.
#		$2 Where:-	stdout == 0
#				stderr == 1
# No return value.
output()
{
	if (( !$2 )); then
		if [[ $verbosity == "-v" ]]; then
			printf "%s\n" "$1"
		fi
	else
		printf "%s\n" "$1" 1>&2
	fi
}

# Standard function to test command error ($1 is $?) and exit if non-zero
std_cmd_err_handler()
{
	if [ $1 != 0 ]; then
		script_exit_code=$1
		script_exit
	fi
}

# Standard function to tidy up and return exit code
script_exit()
{
	exit $script_exit_code
}

# Standard trap exit function
trap_exit()
{
script_exit_code=1
output "Script terminating due to trap received. Code: "$script_exit_code 1
script_exit
}

# Setup trap
trap trap_exit SIGHUP SIGINT SIGTERM

########
# Main #
########
# Process command line arguments with GNU getopt.

# Options u and w are mutually exclusive.

GETOPTTEMP=`getopt -o huvVw --long help,unix,verbose,version,windows \
		-n "$0" -- "$@"`
std_cmd_err_handler $?

eval set -- "$GETOPTTEMP"
std_cmd_err_handler $?

while true; do
	case "$1" in
	-h|--help)
		usage
		shift
		script_exit_code=0
		script_exit
		;;
	-u|--unix)
		if $windows ; then
			script_exit_code=1
			output "Cannot specify options u AND w." 1
			script_exit
		fi
		unix=true
		shift
		;;
	-v|--verbose)	verbosity="-v"
		shift
		;;
	-V|--version)
		echo "$0 Script version "$version
		echo "$0 Package version "$packageversion
		shift
		script_exit_code=0
		script_exit
		;;
	-w|--windows)
		if $unix ; then
			script_exit_code=1
			output "Cannot specify options w AND u." 1
			script_exit
		fi
		windows=true
		shift
		;;
	--)	shift
		break
		;;
	*)	script_exit_code=1
		output "Internal error." 1
		script_exit
		;;
	esac
done

# Either u or w flag must be set.
if ! $windows && ! $unix ; then
	script_exit_code=1
	output "Either -u or -w must be set." 1
	script_exit
fi

# u and w flag cannot both be set.
if $windows && $unix ; then
	script_exit_code=1
	output "-u and -w cannot both be set." 1
	script_exit
fi

# If no cmd line filenames then use stdin and stdout.
if [ $# -lt 1 ]; then
	if $unix ; then	# Convert to Unix line endings.
		awk '{if (substr($0,length,1)=="\r")
			sub(/\r$/, "");
			print;}'
	else	# Convert to Windows line endings.
		awk '{if (substr($0,length,1)!="\r")
			sub(/$/, "\r");
			print;}'
	fi
	# And exit
	script_exit_code=0
	output "Script complete with exit code: "$script_exit_code \
		$script_exit_code
	script_exit
fi

# Otherwise process cmd line filenames in sequence.
# The for line == for arg in $@
for arg; do
	if [ -f $arg ]; then	# Is it a regular file.
		if [ -r $arg -a -w $arg ]; then	# Is it readable and writable.
			if $unix ; then		# Convert to Unix
				awk '{if (substr($0,length,1)=="\r")
					sub(/\r$/, "");
					print;}' $arg > $arg.tmp \
					&& mv -f $arg.tmp $arg
				status=$?
				msg="Converted file "$arg" to Unix format "
				msg+="complete with status "$status
				output "$msg" $status
				((script_exit_code=$script_exit_code + $status))
			else	# Convert to Windows line endings.
				awk '{if (substr($0,length,1)!="\r")
					sub(/$/, "\r");
					print;}' $arg > $arg.tmp \
					&& mv -f $arg.tmp $arg
				status=$?
				msg="Converted file "$arg" to Windows format "
				msg+="complete with status "$status
				output "$msg" $status
				((script_exit_code=$script_exit_code + $status))
			fi
		else
			msg="File "$arg" does not have the correct permissions."
			output "$msg" 1
			((script_exit_code=$script_exit_code + 1))
		fi
	else
		output "File "$arg" does not exist or is not a regular file." 1
		((script_exit_code=$script_exit_code + 1))
	fi
done


# And exit
output "Script complete with exit code: "$script_exit_code $script_exit_code
script_exit
